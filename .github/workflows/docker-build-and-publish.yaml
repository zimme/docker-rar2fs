name: Build, Test, and Publish

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

env:
  ORGANIZATION: zimme
  IMAGE_NAME: rar2fs

jobs:
  prepare:
    name: Prepare build metadata
    runs-on: ubuntu-latest
    outputs:
      tag-latest: ${{ steps.set-tags.outputs.tag-latest }}
      tag-detailed: ${{ steps.set-tags.outputs.tag-detailed }}
      tag-ghcr-latest: ${{ steps.set-tags.outputs.tag-ghcr-latest }}
      tag-ghcr-detailed: ${{ steps.set-tags.outputs.tag-ghcr-detailed }}
      unrar-version: ${{ steps.extract-versions.outputs.unrar-version }}
      rar2fs-version: ${{ steps.extract-versions.outputs.rar2fs-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract versions from Dockerfile
        id: extract-versions
        run: |
          # Extract RUNTIME_IMAGE from ARG
          RUNTIME_IMAGE=$(grep '^ARG RUNTIME_IMAGE=' Dockerfile | awk -F'=' '{print $2}' | tr -d ' ')
          if [ -z "$RUNTIME_IMAGE" ]; then
            echo "Error: RUNTIME_IMAGE not found in Dockerfile."
            exit 1
          fi

          # Extract base image name and version
          BASE_IMAGE_NAME=$(echo $RUNTIME_IMAGE | cut -d':' -f1)
          BASE_IMAGE_VERSION=$(echo $RUNTIME_IMAGE | cut -d':' -f2)
          if [ -z "$BASE_IMAGE_NAME" ] || [ -z "$BASE_IMAGE_VERSION" ]; then
            echo "Error: Failed to parse BASE_IMAGE_NAME or BASE_IMAGE_VERSION."
            exit 1
          fi

          # Extract UNRAR_VERSION from ARG
          UNRAR_VERSION=$(grep '^ARG UNRAR_VERSION=' Dockerfile | awk -F'=' '{print $2}' | tr -d ' ')
          if [ -z "$UNRAR_VERSION" ]; then
            echo "Error: UNRAR_VERSION not found in Dockerfile."
            exit 1
          fi

          # Extract RAR2FS_VERSION from ARG
          RAR2FS_VERSION=$(grep '^ARG RAR2FS_VERSION=' Dockerfile | awk -F'=' '{print $2}' | tr -d ' ')
          if [ -z "$RAR2FS_VERSION" ]; then
            echo "Error: RAR2FS_VERSION not found in Dockerfile."
            exit 1
          fi

          # Set outputs for use in other jobs
          echo "unrar-version=$UNRAR_VERSION" >> $GITHUB_OUTPUT
          echo "rar2fs-version=$RAR2FS_VERSION" >> $GITHUB_OUTPUT
          echo "base-image-name=$BASE_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "base-image-version=$BASE_IMAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Set tag variables
        id: set-tags
        run: |
          # Define tag variables based on extracted versions
          TAG_LATEST="${ORGANIZATION}/${IMAGE_NAME}:latest"
          TAG_DETAILED="${ORGANIZATION}/${IMAGE_NAME}:${{ steps.extract-versions.outputs.rar2fs-version }}-unrar${{ steps.extract-versions.outputs.unrar-version }}-${{ steps.extract-versions.outputs.base-image-name }}${{ steps.extract-versions.outputs.base-image-version }}"
          TAG_GHCR_LATEST="ghcr.io/${TAG_LATEST}"
          TAG_GHCR_DETAILED="ghcr.io/${TAG_DETAILED}"

          # Set outputs for use in other jobs
          echo "tag-latest=$TAG_LATEST" >> $GITHUB_OUTPUT
          echo "tag-detailed=$TAG_DETAILED" >> $GITHUB_OUTPUT
          echo "tag-ghcr-latest=$TAG_GHCR_LATEST" >> $GITHUB_OUTPUT
          echo "tag-ghcr-detailed=$TAG_GHCR_DETAILED" >> $GITHUB_OUTPUT

  build-test:
    name: Build and test Docker image
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for testing
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          tags: |
            ${{ needs.prepare.outputs.tag-latest }}

      - name: Test Docker image
        run: |
          docker run --rm ${{ needs.prepare.outputs.tag-latest }} --version

  publish:
    name: Publish Docker images
    runs-on: ubuntu-latest
    needs: [prepare, build-test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ needs.prepare.outputs.tag-latest }}
            ${{ needs.prepare.outputs.tag-detailed }}
            ${{ needs.prepare.outputs.tag-ghcr-latest }}
            ${{ needs.prepare.outputs.tag-ghcr-detailed }}
